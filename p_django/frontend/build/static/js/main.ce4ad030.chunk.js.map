{"version":3,"sources":["Upload.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","file","setFile","useState","xmlData","setXmlData","errorLines","setErrorLines","parseLine","line","match","_","id","cui","nombres","matricula","nota","estado","success","concat","parseInt","trim","reason","React","createElement","type","onChange","e","target","files","onClick","async","formData","FormData","append","serverUrl","process","REACT_APP_SERVER_URL","response","axios","post","headers","lines","data","split","taggedLines","forEach","cleanedLine","replace","result","push","join","error","console","length","className","map","index","key","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0MAsGeA,MAnGf,WACI,MAAOC,EAAMC,GAAWC,mBAAS,OAC1BC,EAASC,GAAcF,mBAAS,KAChCG,EAAYC,GAAiBJ,mBAAS,IA6CvCK,EAAaC,IAEf,MACMC,EAAQD,EAAKC,MADL,2HAGd,GAAIA,EAAO,CACP,MAAOC,EAAGC,EAAIC,EAAKC,EAASC,EAAWC,EAAMC,GAAUP,EAGvD,MAAO,CACHQ,SAAS,EACTT,KAAK,oBAADU,OACVC,SAASR,GAAG,oBAAAO,OACXN,EAAG,yBAAAM,OACCL,EAAQO,OAAM,+BAAAF,OACZJ,EAAS,4BAAAI,OACdH,EAAI,yBAAAG,OACFF,EAAM,wBAKR,MAAO,CACHC,SAAS,EACTI,OAAQ,kDAKpB,OACIC,IAAAC,cAAA,WACID,IAAAC,cAAA,SAAOC,KAAK,OAAOC,SA1EDC,IACtBzB,EAAQyB,EAAEC,OAAOC,MAAM,OAyE8B,IACjDN,IAAAC,cAAA,UAAQM,QAvEKC,UACjB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,MAAOjC,GAGvB,IAAIkC,EAAYC,mHAAYC,sBAAwB,iDAEpD,IACI,MAAMC,QAAiBC,IAAMC,KAAK,GAADrB,OAAIgB,EAAS,WAAWH,EAAU,CAC/DS,QAAS,CACL,eAAgB,yBAMlBC,EADUJ,EAASK,KACHC,MAAM,MACtBC,EAAc,GACdvC,EAAa,GAEnBoC,EAAMI,QAAQrC,IAEV,MAAMsC,EAActC,EAAKuC,QAAQ,YAAa,IACxCC,EAASzC,EAAUuC,GACrBE,EAAO/B,QACP2B,EAAYK,KAAKD,EAAOxC,MAExBH,EAAW4C,KAAK,CAAEzC,KAAMsC,EAAazB,OAAQ2B,EAAO3B,WAI5DjB,EAAWwC,EAAYM,KAAK,OAC5B5C,EAAcD,GAChB,MAAO8C,GACLC,QAAQD,MAAM,6BAA8BA,MAqCb,UAAe,IAC9C7B,IAAAC,cAAA,WAAMpB,GAAc,IACnBE,EAAWgD,OAAS,GACjB/B,IAAAC,cAAA,OAAK+B,UAAU,aACXhC,IAAAC,cAAA,UAAI,4BACJD,IAAAC,cAAA,UACKlB,EAAWkD,IAAI,CAACJ,EAAOK,IACpBlC,IAAAC,cAAA,MAAIkC,IAAKD,GACLlC,IAAAC,cAAA,cAAQ,aAAe,IAAE4B,EAAM3C,KAAK,IAACc,IAAAC,cAAA,WACrCD,IAAAC,cAAA,cAAQ,WAAgB,IAAE4B,EAAM9B,a,MCxEjDqC,MAhBf,WACI,OACIpC,IAAAC,cAAA,OAAK+B,UAAU,OACXhC,IAAAC,cAAA,UAAQ+B,UAAU,cACdhC,IAAAC,cAAA,UAAI,wBAERD,IAAAC,cAAA,QAAM+B,UAAU,YACZhC,IAAAC,cAACxB,EAAM,OAEXuB,IAAAC,cAAA,UAAQ+B,UAAU,cACdhC,IAAAC,cAAA,SAAG,iCCFJoC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnD,IAAAC,cAACD,IAAMoD,WAAU,KACfpD,IAAAC,cAACmC,EAAG,QAORC,K","file":"static/js/main.ce4ad030.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Upload() {\r\n    const [file, setFile] = useState(null);\r\n    const [xmlData, setXmlData] = useState('');\r\n    const [errorLines, setErrorLines] = useState([]);\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        const formData = new FormData();\r\n        formData.append('pdf', file);\r\n\r\n        // Determinar la URL del servidor basado en el entorno\r\n        let serverUrl = process.env.REACT_APP_SERVER_URL || 'https://predictor-project-123.wn.r.appspot.com';\r\n\r\n        try {\r\n            const response = await axios.post(`${serverUrl}/upload`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            });\r\n\r\n            // Procesa el texto del PDF recibido del servidor\r\n            const pdfText = response.data;\r\n            const lines = pdfText.split('\\n');\r\n            const taggedLines = [];\r\n            const errorLines = [];\r\n\r\n            lines.forEach(line => {\r\n                // Remover </text> si está al final de la línea\r\n                const cleanedLine = line.replace(/<\\/text>$/, '');\r\n                const result = parseLine(cleanedLine);\r\n                if (result.success) {\r\n                    taggedLines.push(result.line);\r\n                } else {\r\n                    errorLines.push({ line: cleanedLine, reason: result.reason });\r\n                }\r\n            });\r\n\r\n            setXmlData(taggedLines.join('\\n'));\r\n            setErrorLines(errorLines);\r\n        } catch (error) {\r\n            console.error('Error al subir el archivo:', error);\r\n        }\r\n    };\r\n\r\n    // Función para analizar y etiquetar cada línea del texto\r\n    const parseLine = (line) => {\r\n        // Expresión regular para desglosar la línea en sus componentes con soporte Unicode\r\n        const regex = /^(\\d{1,8})(\\d{8})([\\w\\/,\\sÑñÁÉÍÓÚáéíóú]+)(\\d)(\\d+)(APROBADO|DESAPROBADO|RETIRADO)$/u;\r\n        const match = line.match(regex);\r\n\r\n        if (match) {\r\n            const [_, id, cui, nombres, matricula, nota, estado] = match;\r\n\r\n            // Devuelve la línea formateada con etiquetas XML\r\n            return {\r\n                success: true,\r\n                line: `<linea>\r\n    <id>${parseInt(id)}</id>\r\n    <cui>${cui}</cui>\r\n    <nombres>${nombres.trim()}</nombres>\r\n    <matricula>${matricula}</matricula>\r\n    <nota>${nota}</nota>\r\n    <estado>${estado}</estado>\r\n</linea>`\r\n            };\r\n        } else {\r\n            // Devuelve el error si la línea no coincide con el formato esperado\r\n            return {\r\n                success: false,\r\n                reason: 'Formato incorrecto o caracteres no soportados'\r\n            };\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" onChange={handleFileChange} /> {/* Input para seleccionar archivo */}\r\n            <button onClick={handleUpload}>Upload</button> {/* Botón para subir el archivo */}\r\n            <pre>{xmlData}</pre> {/* Muestra los datos XML generados */}\r\n            {errorLines.length > 0 && (\r\n                <div className=\"error-box\">\r\n                    <h2>Líneas no procesadas:</h2>\r\n                    <ul>\r\n                        {errorLines.map((error, index) => (\r\n                            <li key={index}>\r\n                                <strong>Línea:</strong> {error.line} <br />\r\n                                <strong>Motivo:</strong> {error.reason}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Upload;\r\n","import React from 'react';\nimport Upload from './Upload';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Convertir PDF a XML</h1>\n            </header>\n            <main className=\"App-main\">\n                <Upload />\n            </main>\n            <footer className=\"App-footer\">\n                <p>&copy; 2024 Mi Aplicación</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}